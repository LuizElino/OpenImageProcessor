@page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging

@inject IWebHostEnvironment Environment
@inject PythonService pythonService

<div class="page">
    <div class="sidebar">

        <div class="top-row ps-3 navbar navbar-dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="">ImageConvert</a>
                <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </div>

        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                @*  especial features *@
                <div class="nav-item px-1 center">
                    <h2 class="navLabel">Especial Features</h2>
                </div>
                <div class="nav-item px-1 center">
                    <label class="navlabel">
                        <input type="checkbox" @onchange="@(e => CannyEdge(e.Value.ToString()))" value="always" />Count
                    </label>
                    <label class="navlabel">
                        <input type="checkbox" @onchange="@(e => Equalize(e.Value.ToString()))" value="never" />Equalize
                    </label>
                </div>
                <hr>
                @*  filters *@
                <div class="nav-item px-1 center">
                    <h2 class="navLabel">Filters</h2>
                </div>
                <div class="nav-item px-1">
                    <button class="navbutton leftbutton @MediamClicked" @onclick="MediamButton">Mediam</button><button class="navbutton centerbutton @GaussianClicked" @onclick="GaussianButton">Gaussian</button><button class="navbutton rightbutton @MedianaClicked" @onclick="MedianaButton">Mediana</button>
                </div>
                <div class="nav-item px-1">
                    <label class="navlabel">Range @Value</label><input class="navrange" type="range" min="1" max="11" value="@Value" @onchange="@(e => RefreshFilter(e, ImageActualName))" step="2" />
                </div>
                <hr>
                @* Segmentation *@
                <div class="nav-item px-1 center">
                    <h2 class="navLabel">Segmentation</h2>
                </div>
                <div class="nav-item px-1 center">
                    <div>
                        <button class="navbutton leftbutton @AdaptativeClicked" @onclick="AdaptativeSegmentationButton">Adaptative</button><button class="navbutton rightbutton @ManualClicked" @onclick="ManualSegmentationButton">Manual</button>
                    </div>
                </div>
                <div class="nav-item px-1">
                    <label class="navlabel">Range @ValueSegmentation</label><input class="navrange" type="range" min="1" max="251" value="@ValueSegmentation" @onchange="@(e => RefreshFilterSegmentation(e, ImageActualName))" step="10" />
                </div>
                <hr>
                @* Delimitation *@
                <div class="nav-item px-1 center">
                    <h2 class="navLabel">Delimitation</h2>
                </div>
                <div class="nav-item px-1 center">
                    <label class="navlabel">
                        <input type="radio" name="Delimitation" value="always" @onclick="Otsu" />Otsu
                    </label>
                    <label class="navlabel">
                        <input type="radio" name="Delimitation" value="never" @onclick="Canny" />Canny
                    </label>
                    <label class="navlabel">
                        <input type="radio" name="Delimitation" value="costChange" @onclick="Sobel" />Sobel
                    </label>
                    <label class="navlabel">
                        <input type="radio" name="Delimitation" value="costChange" @onclick="None" />None
                    </label>
                </div>
                <hr>
                @* Histogram *@
                 <div class="nav-item px-1 center">
                    <h2 class="navLabel">Histogram</h2>
                </div>
                <div class="nav-item px-1 center">
                    @if(ImageHistogramName != "")
                    {
                      <img class="card-img-top" src="@(ActualPath+ImageHistogramName)" alt="Card image cap">
                    }
                </div>
            </nav>
        </div>

    </div>
    @if (loadedFiles.Count > 0)
    {
        @if (isLoading)
        {
            <p>Uploading...</p>
        }
        else
        {
            <div class="container">

                <img class="card-img-top" src="@(ActualPath+ImageActualName)" alt="Card image cap">

            </div>
        }
    }
    else
    {
        <div class="container redline">
            <p>
                <label>
                    Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
                    <InputFile OnChange="@LoadFiles" multiple />
                </label>
            </p>
        </div>
    }
</div>

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 500;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    public string Image = "";
    public string ImgChangePath = "";
    public string ImgEqualizedChangePath = "";
    public string ImgGrayChangePath = "";
    public string OutPutPath = "Imgs/Output/";
    public string ActualPath = "Imgs/Actual/";
    public string InPutPath = "Imgs/Input/";
    public string histogramPath = "/Imgs/Output/Plot";
    public string EqualizedPath = "/Imgs/Output/Equalized/";
    public string MediamPath = "/Imgs/Output/Mediam/";
    public string MedianaPath = "/Imgs/Output/Mediana/";
    public string GaussianPath = "/Imgs/Output/Gaussian/";
    public string ManualSegmentationPath = "/Imgs/Output/ManualSegmentation/";
    public string AdaptativeSegmentationPath = "/Imgs/Output/AdaptativeSegmentation/";
    public string OtsuPath = "/Imgs/Output/Otsu/";
    public string CannyPath = "/Imgs/Output/Canny/";
    public string SobelPath = "/Imgs/Output/Sobel/";
    public string CannyEdgePath = "/Imgs/Output/CannyEdge/";


    bool hasEqualized = false;
    bool hasGray = false;
    bool hasMediam = false;
    bool hasMediaana = false;
    bool hasGaussian = false;
    bool hasManualSegmentation = false;
    bool hasAdaptativeSegmentation = false;
    bool hasOtsu = false;
    bool hasCanny = false;
    bool hasSobel = false;
    bool hasCannyEdge = false;
    //Histogram Paths
    public string HistogramPath = "";
    //show histogram
    public bool ShowGray = false;
    public bool ShowAdaptative = false;
    public bool ShowManual = false;
    public bool ShowSobel = false;
    public bool ShowCanny = false;
    public bool ShowMediam = false;
    public bool ShowMediana = false;
    public bool ShowOtsu = false;
    public bool ShowGaussian = false;
    public bool ShowEqualized = false;
    //Obj count
    public int ObjectNumber = 0;
    public bool IsEqualized = false;
    public string DelimitationType = "";
    //Values
    public int Value = 1;
    public int ValueSegmentation = 1;
    public int MediamValue = 1;
    public int MedianaValue = 1;
    public int GaussianValue = 1;
    public int AdaptativeValue = 1;
    public int ManualValue = 1;
    public int OtsuValue = 1;
    public int SobelValue = 1;
    public int Threshould1Value = 101;
    public int Threshould2Value = 251;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    public int FilterType = 0;
    public int SegmentationType = 0;

    //image actual name
    public string ImageActualName = "";
    public string ImageHistogramName = "";
    public string OriginalName = "";


    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private void Resetvariables()
    {
        hasEqualized = false;
        hasGray = false;
        hasMediam = false;
        hasMediaana = false;
        hasGaussian = false;
        hasManualSegmentation = false;
        hasAdaptativeSegmentation = false;
        hasOtsu = false;
        hasCanny = false;
        hasSobel = false;
        hasCannyEdge = false;
        ShowGray = false;
        ShowAdaptative = false;
        ShowManual = false;
        ShowSobel = false;
        ShowCanny = false;
        ShowMediam = false;
        ShowMediana = false;
        ShowOtsu = false;
        ShowGaussian = false;
        ShowEqualized = false;
        ObjectNumber = 0;
    }

    private void RefreshFilter(ChangeEventArgs e, string newName)
    {
        if (e.Value.ToString() != "")
        {
            if (int.Parse(e.Value.ToString()) > 0)
            {
                Value = int.Parse(e.Value.ToString());
                if (MediamClickedState) Mediam();
                else if (MedianaClickedState) Mediana();
                else if (GaussianClickedState) Gaussian();
            }
        }


    }

    private void RefreshFilterSegmentation(ChangeEventArgs e, string newName)
    {
        if (e.Value.ToString() != "")
        {
            if (int.Parse(e.Value.ToString()) > 0)
            {
                ValueSegmentation = int.Parse(e.Value.ToString());
                switch (FilterType)
                {
                    case 1:
                        Mediam();
                        break;
                    case 2:
                        Mediana();
                        break;
                    case 3:
                        Gaussian();
                        break;
                    case 0:

                        break;
                }
            }
        }


    }

    public void ToGrayScale()
    {
        var args = pythonService.GetGray(ImgChangePath, Image);
        ImgChangePath = args.Split("\r\n")[0];
        ImgGrayChangePath = args.Split("\r\n")[0];
        ImageActualName = args.Split("\r\n")[1];
        OriginalName = args.Split("\r\n")[1];
        var histrogramArgs = pythonService.GenerateHistogram(args.Split("\r\n")[0], ImageActualName);
        histogramPath = histrogramArgs.Split("\r\n")[0];
        ImageHistogramName = histrogramArgs.Split("\r\n")[1];
     
    }

    public void Equalize(string checkValue)
    {
        var check = checkValue;
        string args = "";
        if (check == "True")
        {
            IsEqualized = true;
        }
        else
        {
            IsEqualized = false;
        }
        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }
    }
    public bool HasCount = false;
    public void CannyEdge(string checkValue)
    {
        var check = checkValue;
        string args = "";
        if (check == "True")
        {
            HasCount = true;
        }
        else
        {
            ImageActualName = OriginalName;
            HasCount = false;
        }
        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }

    }
    public void Histogram(string path, string type)
    {
        pythonService.GenerateHistogram(path, type + "/Histogram/" + Image);
    }

    public void HistogramRefresh(string path, string name = "")
    {
        pythonService.GenerateHistogram(path, name);
    }

    string AdaptativeClicked = "";
    bool AdaptativeClickedState = false;
    public void AdaptativeSegmentationButton()
    {
        AdaptativeClickedState = !AdaptativeClickedState;
        if (AdaptativeClickedState)
        {
            SegmentationType = 1;
            AdaptativeClicked = "MediamClicked";
            ManualClicked = "";
            ManualClickedState = false;
        }
        else
        {
            SegmentationType = 0;
            AdaptativeClicked = "";
        }
        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }
    }

    string ManualClicked = "";
    bool ManualClickedState = false;
    public void ManualSegmentationButton()
    {
        SegmentationType = 2;
        ManualClickedState = !ManualClickedState;
        if (ManualClickedState)
        {
            SegmentationType = 2;
            ManualClicked = "MediamClicked";
            AdaptativeClicked = "";
            AdaptativeClickedState = false;
        }
        else
        {
            SegmentationType = 0;
            ManualClicked = "";
        }
        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }
    }

    string MediamClicked = "";
    bool MediamClickedState = false;
    public void MediamButton()
    {
        MediamClickedState = !MediamClickedState;
        if (MediamClickedState)
        {
            MediamClicked = "MediamClicked";
            GaussianClicked = "";
            GaussianClickedState = false;
            MedianaClicked = "";
            MedianaClickedState = false;
        }
        else
        {
            MediamClicked = "";
        }
        Mediam();
    }

    string MedianaClicked = "";
    bool MedianaClickedState = false;
    public void MedianaButton()
    {
        MedianaClickedState = !MedianaClickedState;
        if (MedianaClickedState)
        {
            GaussianClicked = "";
            GaussianClickedState = false;
            MediamClicked = "";
            MediamClickedState = false;
            MedianaClicked = "MedianaClicked";
        }
        else
        {
            MedianaClicked = "";
        }
        Mediana();
    }
    string GaussianClicked = "";
    bool GaussianClickedState = false;
    public void GaussianButton()
    {
        GaussianClickedState = !GaussianClickedState;
        if (GaussianClickedState)
        {
            MedianaClicked = "";
            MedianaClickedState = false;
            MediamClicked = "";
            MediamClickedState = false;
            GaussianClicked = "GaussianClicked";
        }
        else
        {
            GaussianClicked = "";
        }
        Gaussian();
    }
    public void Mediam()
    {
        string args = "";
        if(ImgChangePath != "")
        {
            if (MediamClickedState)
            {
                FilterType = 1;
                args = pythonService.Mediam(ImgChangePath, Value + Image, Value);
                //ImgEqualizedChangePath = args.Split("\r\n")[0];
                ImageActualName = args.Split("\r\n")[1];
            }
            else
            {
                args = ImgChangePath+"\r\n";
            }
            if (IsEqualized)
            {
                args = pythonService.Equalize(args.Split("\r\n")[0], ImageActualName);
                ImageActualName = args.Split("\r\n")[1];
            }
            if (SegmentationType == 2)
            {
                args = pythonService.ManualSegmentation(args.Split("\r\n")[0], ManualValue.ToString() + ValueSegmentation + Threshould2Value.ToString() + ImageActualName, ManualValue, ValueSegmentation, Threshould2Value);
                ImageActualName = args.Split("\r\n")[1];
            }
            else if (SegmentationType == 1)
            {
                args = pythonService.AdaptativeSegmentation(args.Split("\r\n")[0], ValueSegmentation + ImageActualName, ValueSegmentation);
                ImageActualName = args.Split("\r\n")[1];
            }

            switch (DelimitationType)
            {
                case "Otsu":
                    args = pythonService.Otsu(args.Split("\r\n")[0], Value + ImageActualName, OtsuValue);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "Sobel":
                    args = pythonService.Sobel(args.Split("\r\n")[0], Value + ImageActualName, SobelValue);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "Canny":
                    args = pythonService.Canny(args.Split("\r\n")[0], Value + ImageActualName, 15, 100, 200);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "None":

                    break;
            }
            if (HasCount)
            {
                args = pythonService.CannyEdge(args.Split("\r\n")[0], ImageActualName);
                ObjectNumber = int.Parse(args.Split("\r\n")[1]);
                ImageActualName = args.Split("\r\n")[0];
            }
            var histrogramArgs = pythonService.GenerateHistogram(args.Split("\r\n")[0], ImageActualName);
            histogramPath = histrogramArgs.Split("\r\n")[0];
            ImageHistogramName = histrogramArgs.Split("\r\n")[1];
        }
       
    }
    public void Mediana()
    {
        string args = "";
        if (ImgChangePath != "")
        {
            if (MedianaClickedState)
            {
                FilterType = 2;
                args = pythonService.Mediana(ImgChangePath, Value + Image, Value); 
                ImageActualName = args.Split("\r\n")[1];
            }
            else
            {
                args = ImgChangePath+"\r\n";
                ImageActualName = OriginalName;
            }
            if (IsEqualized)
            {
                args = pythonService.Equalize(args.Split("\r\n")[0], ImageActualName);
                ImageActualName = args.Split("\r\n")[1];
            }
            if (SegmentationType == 2)
            {
                args = pythonService.ManualSegmentation(args.Split("\r\n")[0], ManualValue.ToString() + ValueSegmentation + Threshould2Value.ToString() + ImageActualName, ManualValue, ValueSegmentation, Threshould2Value);
                ImageActualName = args.Split("\r\n")[1];
            }
            else if (SegmentationType == 1)
            {
                args = pythonService.AdaptativeSegmentation(args.Split("\r\n")[0], ValueSegmentation + ImageActualName, ValueSegmentation);
                ImageActualName = args.Split("\r\n")[1];
            }

            switch (DelimitationType)
            {
                case "Otsu":
                    args = pythonService.Otsu(args.Split("\r\n")[0], Value + ImageActualName, OtsuValue);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "Sobel":
                    args = pythonService.Sobel(args.Split("\r\n")[0], Value + ImageActualName, SobelValue);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "Canny":
                    args = pythonService.Canny(args.Split("\r\n")[0], Value + ImageActualName, 15, 100, 200);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "None":

                    break;
            }
            if (HasCount)
            {
                args = pythonService.CannyEdge(args.Split("\r\n")[0], ImageActualName);
                ObjectNumber = int.Parse(args.Split("\r\n")[1]);
                ImageActualName = args.Split("\r\n")[0];
            }
            var histrogramArgs = pythonService.GenerateHistogram(args.Split("\r\n")[0], ImageActualName);
            histogramPath = histrogramArgs.Split("\r\n")[0];
            ImageHistogramName = histrogramArgs.Split("\r\n")[1];
        }
           
    }
    public void Gaussian()
    {
        string args = "";
        if (ImgChangePath != "")
        {
            if (GaussianClickedState)
            {
                FilterType = 3;
                args = pythonService.Gaussian(ImgChangePath, Value + Image, Value);
                ImageActualName = args.Split("\r\n")[1];
            }
              else
            {
                args = ImgChangePath+"\r\n";
            }
            if (IsEqualized)
            {
                args = pythonService.Equalize(args.Split("\r\n")[0], ImageActualName);
                ImageActualName = args.Split("\r\n")[1];
            }
            if (SegmentationType == 2)
            {
                args = pythonService.ManualSegmentation(args.Split("\r\n")[0], ManualValue.ToString() + ValueSegmentation + Threshould2Value.ToString() + ImageActualName, ManualValue, ValueSegmentation, Threshould2Value);
                ImageActualName = args.Split("\r\n")[1];
            }
            else if (SegmentationType == 1)
            {
                args = pythonService.AdaptativeSegmentation(args.Split("\r\n")[0], ValueSegmentation + ImageActualName, ValueSegmentation);
                ImageActualName = args.Split("\r\n")[1];
            }

            switch (DelimitationType)
            {
                case "Otsu":
                    args = pythonService.Otsu(args.Split("\r\n")[0], Value + ImageActualName, OtsuValue);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "Sobel":
                    args = pythonService.Sobel(args.Split("\r\n")[0], Value + ImageActualName, SobelValue);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "Canny":
                    args = pythonService.Canny(args.Split("\r\n")[0], Value + ImageActualName, 15, 100, 200);
                    ImageActualName = args.Split("\r\n")[1];
                    break;
                case "None":

                    break;
            }
            if (HasCount)
            {
                args = pythonService.CannyEdge(args.Split("\r\n")[0], ImageActualName);
                ObjectNumber = int.Parse(args.Split("\r\n")[1]);
                ImageActualName = args.Split("\r\n")[0];
            }
            var histrogramArgs = pythonService.GenerateHistogram(args.Split("\r\n")[0], ImageActualName);
            histogramPath = histrogramArgs.Split("\r\n")[0];
            ImageHistogramName = histrogramArgs.Split("\r\n")[1];
        }
    }
    public void AdaptativeSegmentation()
    {

        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }


    }
    public void ManualSegmentation()
    {
        SegmentationType = 2;
        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }

    }
    public void Otsu()
    {
        DelimitationType = "Otsu";
        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }
    }
    public void Sobel()
    {
        DelimitationType = "Sobel";

        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }
    }
    public void None()
    {
        DelimitationType = "None";

        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }
    }
    public void Canny()
    {
        DelimitationType = "Canny";

        switch (FilterType)
        {
            case 1:
                Mediam();
                break;
            case 2:
                Mediana();
                break;
            case 3:
                Gaussian();
                break;
            case 0:

                break;
        }
    }




    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        Resetvariables();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
                var trustedFileNameForFileStorage = file.Name;
                Image = file.Name;
                ImageActualName = file.Name;
                var path = Path.Combine(Environment.ContentRootPath,
                        "wwwroot", "Imgs", "Actual",
                        trustedFileNameForFileStorage);
                ImgChangePath = path;
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            }
            catch (Exception ex)
            {

            }
        }

        ToGrayScale();

        isLoading = false;
    }
}