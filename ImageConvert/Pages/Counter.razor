@page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging

@inject IWebHostEnvironment Environment
@inject PythonService pythonService

<div class="page">
    <div class="sidebar">

    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">ImageConvert</a>
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>

    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <nav class="flex-column">
           @*  especial features *@
            <div class="nav-item px-3 center">
            <h2 class="navLabel">Especial Features</h2>
            </div>
            <div class="nav-item px-3">
               <button class="navbutton">Make Gray</button><button class="navbutton">Count</button><button class="navbutton">Equalize</button>
            </div>
            @*  filters *@
             <div class="nav-item px-3 center">
            <h2 class="navLabel">Filters</h2>
            </div>
            <div class="nav-item px-3">
               <button class="navbutton leftbutton">Mediam</button><button class="navbutton centerbutton">Gaussian</button><button class="navbutton rightbutton">Mediana</button>
            </div>
            <div class="nav-item px-3">
                <label class="navlabel">Range</label><input class="navrange" type="range"/>
            </div>
            @* Segmentation *@
            <div class="nav-item px-3 center">
            <h2 class="navLabel">Segmentation</h2>
            </div>
            <div class="nav-item px-3 center">
                <div>
               <button class="navbutton leftbutton">Adaptative</button><button class="navbutton rightbutton">Manual</button>
               </div>
            </div>
            <div class="nav-item px-3">
                <label class="navlabel">Range</label><input class="navrange" type="range"/>
            </div>
            @* Delimitation *@
            <div class="nav-item px-3 center">
            <h2 class="navLabel">Delimitation</h2>
            </div>
            <div class="nav-item px-3 center">
            <label>
                <input type="radio"  value="always"/>Otsu
            </label>
            <label>
                <input type="radio" value="never"/>Canny
            </label>
            <label>
                <input type="radio" value="costChange"/>Sobel
            </label>
            </div>
        </nav>
    </div>

</div>

<div class="container">
    <p>
        <label>
            Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
            <InputFile OnChange="@LoadFiles" multiple />
        </label>
    </p>
</div>
</div>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <div class="container">
                <div class="row space">
                    <div class="col-sm">
                        <div class="card" style="width: 18rem;">
                            <img class="card-img-top" src="@(InPutPath+file.Name)" alt="Card image cap">
                            <div class="card-body">
                                <h5 class="card-title">Card title</h5>
                            </div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">Name: @file.Name</li>
                                <li class="list-group-item">Last modified: @file.LastModified.ToString()</li>
                                <li class="list-group-item">Size (bytes): @file.Size</li>
                                <li class="list-group-item">Content type: @file.ContentType</li>
                            </ul>
                            <div class="card-body">
                                <button type="button" class="btn btn-primary" @onclick="@ToGrayScale">Make Gray</button>
                                <button type="button" class="btn btn-primary" @onclick="@CannyEdge">Count</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                <img class="card-img-top" src="@(OutPutPath+file.Name)" alt="Card image cap">
                                @if (ShowGray)
                                {
                                    <img class="card-img-top" src="@(OutPutPath+"Histogram/"+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {ShowGray = !ShowGray; Histogram(ImgChangePath,"");})">Histogram</button>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-sm">
                        @if (hasCannyEdge)
                        {

                            <div class="card" style="width: 18rem;">
                                <div class="card-body">
                                    <h5 class="card-title">Objects Count: @ObjectNumber</h5>
                                </div>
                                <img class="card-img-top" src="@(CannyEdgePath+file.Name)" alt="Card image cap">
                            </div>
                        }
                    </div>
                </div>
                <div class="row space">
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasEqualized)
                                {
                                    <img class="card-img-top" src="@(EqualizedPath+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <h5 class="card-title">Equalized Image</h5>
                                </div>
                                @if (ShowEqualized)
                                {
                                    <img class="card-img-top" src="@(EqualizedPath+"Histogram/"+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@Equalize">Make Equalized</button>
                                    @if (hasEqualized)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowEqualized = !ShowEqualized;Histogram(HistogramEqualizedPath,"Equalized");})">Histogram</button>
                                    }
                                </div>

                            </div>
                        }
                    </div>
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasMediam)
                                {
                                    <img class="card-img-top" src="@(MediamPath+MediamValue+file.Name)" alt="Card image cap">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">Mediam: </h5>
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="basic-addon1">Range</span>
                                        </div>
                                        <input type="number" min="1" step="2" value="@MediamValue" @oninput="@(e => RefreshMediam(e, file.Name))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                    </div>
                                </div>
                                @if (ShowMediam)
                                {
                                    <img class="card-img-top" src="@(MediamPath+"Histogram/"+MediamValue+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {hasMediam = !hasMediam;if(hasMediam){Mediam();}})">Make Mediam</button>
                                    @if (hasMediam)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowMediam = !ShowMediam;if(ShowMediam){HistogramRefresh(HistogramMediamPath,"Mediam", MediamValue+file.Name);}})">Histogram</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasMediaana)
                                {
                                    <img class="card-img-top" src="@(MedianaPath+MedianaValue+file.Name)" alt="Card image cap">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">Mediana Image</h5>
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="basic-addon1">Range</span>
                                        </div>
                                        <input type="number" min="1"  step="2" value="@MedianaValue" @oninput="@(e => RefreshMediana(e, file.Name))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                    </div>
                                </div>
                                @if (ShowMediana)
                                {
                                    <img class="card-img-top" src="@(MedianaPath+"Histogram/"+MedianaValue+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {hasMediaana = !hasMediaana;if(hasMediaana){Mediana();}})">Make Mediana</button>
                                    @if (hasMediaana)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowMediana =!ShowMediana;if(ShowMediana){HistogramRefresh(HistogramMedianaPath,"Mediana", MedianaValue+file.Name);}})">Histogram</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="row space">
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasGaussian)
                                {
                                    <img class="card-img-top" src="@(GaussianPath+GaussianValue+file.Name)" alt="Card image cap">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">Gaussian Image</h5>
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="basic-addon1">Range</span>
                                        </div>
                                        <input type="number" min="1"  step="2" value="@GaussianValue" @oninput="@(e => RefreshGaussian(e, file.Name))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                    </div>
                                </div>
                                @if (ShowGaussian)
                                {
                                    <img class="card-img-top" src="@(GaussianPath+"Histogram/"+GaussianValue+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {hasGaussian = !hasGaussian;if(hasGaussian){Gaussian();}})">Make Gaussian</button>
                                    @if (hasGaussian)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowGaussian = !ShowGaussian;HistogramRefresh(HistogramGaussianPath,"Gaussian",GaussianValue+file.Name);})">Histogram</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasAdaptativeSegmentation)
                                {
                                    <img class="card-img-top" src="@(AdaptativeSegmentationPath+AdaptativeValue+file.Name)" alt="Card image cap">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">Adaptative Segmentation Image</h5>
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="basic-addon1">Range</span>
                                        </div>
                                        <input type="number" min="1" step="2" value="@AdaptativeValue" @oninput="@(e => RefreshAdaptative(e, file.Name))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                    </div>
                                </div>
                                @if (ShowAdaptative)
                                {
                                    <img class="card-img-top" src="@(AdaptativeSegmentationPath+"Histogram/"+AdaptativeValue+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {hasAdaptativeSegmentation = !hasAdaptativeSegmentation;if(hasAdaptativeSegmentation){AdaptativeSegmentation();}})">Make Adaptative Segmentation</button>
                                    @if (hasAdaptativeSegmentation)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowAdaptative = !ShowAdaptative;if(ShowAdaptative){HistogramRefresh(HistogramAdaptativeSegmentationPath,"AdaptativeSegmentation",AdaptativeValue+file.Name);}})">Histogram</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasManualSegmentation)
                                {
                                    <img class="card-img-top" src="@(ManualSegmentationPath+ManualValue+Threshould1Value+Threshould2Value+file.Name)" alt="Card image cap">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">Manual Segmentation Image</h5>
                                        <div class="input-group mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text" id="basic-addon1">Blur</span>
                                            </div>
                                            <input type="number"min="1" step="2" max="255" value="@ManualValue" @oninput="@(e => RefreshManual(e, file.Name,1))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                        </div>
                                        <div class="input-group mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text" id="basic-addon1">Threshold 1:</span>
                                            </div>
                                            <input type="number"min="1" step="10" max="255" value="@Threshould1Value" @oninput="@(e => RefreshManual(e, file.Name,2))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                         </div>
                                        <div class="input-group mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text" id="basic-addon1">Threshould 2:</span>
                                            </div>
                                            <input type="number" min="1" step="10" max="255"value="@Threshould2Value" @oninput="@(e => RefreshManual(e, file.Name,3))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                         </div>
                                </div>
                                @if (ShowManual)
                                {
                                    <img class="card-img-top" src="@(ManualSegmentationPath+"Histogram/"+ManualValue+Threshould1Value+Threshould2Value+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {hasManualSegmentation = !hasManualSegmentation;if(hasManualSegmentation){ManualSegmentation();}})">Make Manual Segmentation</button>
                                    @if (hasManualSegmentation)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowManual = !ShowManual;if(ShowManual){HistogramRefresh(HistogramManualSegmentationPath,"ManualSegmentation", ManualValue.ToString() + Threshould1Value.ToString() + Threshould2Value.ToString()+file.Name);}})">Histogram</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="row space">
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasOtsu)
                                {
                                    <img class="card-img-top" src="@(OtsuPath+OtsuValue+file.Name)" alt="Card image cap">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">Otsu Image</h5>
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="basic-addon1">Range</span>
                                        </div>
                                        <input type="number" min="1"  step="2" value="@OtsuValue" @oninput="@(e => RefreshOtsu(e, file.Name))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                    </div>
                                </div>
                                @if (ShowOtsu)
                                {
                                    <img class="card-img-top" src="@(OtsuPath+"Histogram/"+OtsuValue+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {hasOtsu = !hasOtsu;if(hasOtsu){Otsu();}})">Make Otsu</button>
                                    @if (hasOtsu)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowOtsu =!ShowOtsu;if(ShowOtsu){HistogramRefresh(HistogramOtsuPath,"Otsu",OtsuValue+file.Name);}})">Histogram</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasCanny)
                                {
                                    <img class="card-img-top" src="@(CannyPath+file.Name)" alt="Card image cap">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">Canny Image</h5>
                                </div>
                                @if (ShowCanny)
                                {
                                    <img class="card-img-top" src="@(CannyPath+"Histogram/"+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {hasCanny = !hasCanny;if(hasCanny){Canny();}})">Make Canny</button>
                                    @if (hasCanny)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowCanny = !ShowCanny;if(ShowCanny){Histogram(HistogramCannyPath,"Canny");}})">Histogram</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-sm">
                        @if (hasGray)
                        {
                            <div class="card" style="width: 18rem;">
                                @if (hasSobel)
                                {
                                    <img class="card-img-top" src="@(SobelPath+SobelValue+file.Name)" alt="Card image cap">
                                }

                                <div class="card-body">
                                    <h5 class="card-title">Sobel Image</h5>
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text" id="basic-addon1">Range</span>
                                        </div>
                                        <input type="number" min="1" step="2" value="@SobelValue" @oninput="@(e => RefreshSobel(e, file.Name))" class="form-control" placeholder="number" aria-label="number" aria-describedby="basic-addon1">
                                    </div>
                                </div>
                                @if (ShowSobel)
                                {
                                    <img class="card-img-top" src="@(SobelPath+"Histogram/"+SobelValue+file.Name)" alt="Card image cap">
                                }
                                <div class="card-body">
                                    <button type="button" class="btn btn-primary" @onclick="@(() => {hasSobel =! hasSobel;if(hasSobel){Sobel();}})">Make Sobel</button>
                                    @if (hasSobel)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(() => {ShowSobel = !ShowSobel;if(ShowSobel){HistogramRefresh(HistogramSobelPath,"Sobel",SobelValue+file.Name);}})">Histogram</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 500;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    public string Image = "";
    public string ImgChangePath = "";
    public string OutPutPath = "Imgs/Output/";
    public string InPutPath = "Imgs/Input/";
    public string histogramPath = "/Imgs/Output/Plot";
    public string EqualizedPath = "/Imgs/Output/Equalized/";
    public string MediamPath = "/Imgs/Output/Mediam/";
    public string MedianaPath = "/Imgs/Output/Mediana/";
    public string GaussianPath = "/Imgs/Output/Gaussian/";
    public string ManualSegmentationPath = "/Imgs/Output/ManualSegmentation/";
    public string AdaptativeSegmentationPath = "/Imgs/Output/AdaptativeSegmentation/";
    public string OtsuPath = "/Imgs/Output/Otsu/";
    public string CannyPath = "/Imgs/Output/Canny/";
    public string SobelPath = "/Imgs/Output/Sobel/";
    public string CannyEdgePath = "/Imgs/Output/CannyEdge/";


    bool hasEqualized = false;
    bool hasGray = false;
    bool hasMediam = false;
    bool hasMediaana = false;
    bool hasGaussian = false;
    bool hasManualSegmentation = false;
    bool hasAdaptativeSegmentation = false;
    bool hasOtsu = false;
    bool hasCanny = false;
    bool hasSobel = false;
    bool hasCannyEdge = false;
    //Histogram Paths
    public string HistogramMediamPath = "";
    public string HistogramMedianaPath = "";
    public string HistogramGaussianPath = "";
    public string HistogramManualSegmentationPath = "";
    public string HistogramAdaptativeSegmentationPath = "";
    public string HistogramOtsuPath = "";
    public string HistogramCannyPath = "";
    public string HistogramSobelPath = "";
    public string HistogramCannyEdgePath = "";
    public string HistogramEqualizedPath = "";
    //show histogram
    public bool ShowGray = false;
    public bool ShowAdaptative = false;
    public bool ShowManual = false;
    public bool ShowSobel = false;
    public bool ShowCanny = false;
    public bool ShowMediam = false;
    public bool ShowMediana = false;
    public bool ShowOtsu = false;
    public bool ShowGaussian = false;
    public bool ShowEqualized = false;
    //Obj count
    public int ObjectNumber = 0;
    //Values
    public int MediamValue = 1;
    public int MedianaValue = 1;
    public int GaussianValue = 1;
    public int AdaptativeValue = 1;
    public int ManualValue = 1;
    public int OtsuValue = 1;
    public int SobelValue = 1;
    public int Threshould1Value = 101;
    public int Threshould2Value = 101;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private void Resetvariables()
    {
        hasEqualized = false;
        hasGray = false;
        hasMediam = false;
        hasMediaana = false;
        hasGaussian = false;
        hasManualSegmentation = false;
        hasAdaptativeSegmentation = false;
        hasOtsu = false;
        hasCanny = false;
        hasSobel = false;
        hasCannyEdge = false;
        HistogramMediamPath = "";
        HistogramMedianaPath = "";
        HistogramGaussianPath = "";
        HistogramManualSegmentationPath = "";
        HistogramAdaptativeSegmentationPath = "";
        HistogramOtsuPath = "";
        HistogramCannyPath = "";
        HistogramSobelPath = "";
        HistogramCannyEdgePath = "";
        ShowGray = false;
        ShowAdaptative = false;
        ShowManual = false;
        ShowSobel = false;
        ShowCanny = false;
        ShowMediam = false;
        ShowMediana = false;
        ShowOtsu = false;
        ShowGaussian = false;
        ShowEqualized = false;
        ObjectNumber = 0;
    }

    private void RefreshMediam(ChangeEventArgs e, string newName)
    {
        if (e.Value.ToString() != "")
        {
            if (int.Parse(e.Value.ToString()) > 0)
            {
                MediamValue = int.Parse(e.Value.ToString());
                HistogramRefresh(HistogramMediamPath, "Mediam", MediamValue + newName);
                Mediam();
            }
        }


    }
    private void RefreshMediana(ChangeEventArgs e, string newName)
    {
        if (e.Value.ToString() != "")
        {
            if (int.Parse(e.Value.ToString()) > 0)
            {
                if (int.Parse(e.Value.ToString()) % 2 != 0)
                {
                    MedianaValue = int.Parse(e.Value.ToString());
                    HistogramRefresh(HistogramMedianaPath, "Mediana", MedianaValue + newName);
                    Mediana();
                }
            }

        }

    }
    private void RefreshGaussian(ChangeEventArgs e, string newName)
    {
        if (e.Value.ToString() != "")
        {
            if (int.Parse(e.Value.ToString()) > 0)
            {
                if (int.Parse(e.Value.ToString()) % 2 != 0)
                {
                    GaussianValue = int.Parse(e.Value.ToString());
                    HistogramRefresh(HistogramGaussianPath, "Gaussian", GaussianValue + newName);
                    Gaussian();
                }
            }
        }

    }
    private void RefreshAdaptative(ChangeEventArgs e, string newName)
    {
        if (e.Value.ToString() != "")
        {
            if (int.Parse(e.Value.ToString()) > 0)
            {
                if (int.Parse(e.Value.ToString()) % 2 != 0)
                {
                    AdaptativeValue = int.Parse(e.Value.ToString());
                    HistogramRefresh(HistogramAdaptativeSegmentationPath, "AdaptativeSegmentation", AdaptativeValue + newName);
                    AdaptativeSegmentation();
                }
            }
        }

    }
    private void RefreshManual(ChangeEventArgs e, string newName, int rangeType)
    {
        if (e.Value.ToString() != "")
        {
            if (int.Parse(e.Value.ToString()) > 0)
            {
                if (int.Parse(e.Value.ToString()) % 2 != 0)
                {
                    if(rangeType == 1)  ManualValue = int.Parse(e.Value.ToString());
                    else if(rangeType == 2)  Threshould1Value = int.Parse(e.Value.ToString());
                    else  Threshould2Value = int.Parse(e.Value.ToString());
                   
                    ManualSegmentation();
                    HistogramRefresh(HistogramManualSegmentationPath, "ManualSegmentation", ManualValue.ToString() + Threshould1Value.ToString() + Threshould2Value.ToString() + newName);
                }
            }
        }

    }
    private void RefreshOtsu(ChangeEventArgs e, string newName)
    {
        if (e.Value.ToString() != "")
        {
            if (int.Parse(e.Value.ToString()) > 0)
            {
                if (int.Parse(e.Value.ToString()) % 2 != 0)
                {
                    OtsuValue = int.Parse(e.Value.ToString());
                    HistogramRefresh(HistogramOtsuPath, "Otsu", OtsuValue + newName);
                    Otsu();
                }
            }
        }

    }
    private void RefreshSobel(ChangeEventArgs e, string newName)
    {
        if (e.Value.ToString() != "")
        { if (int.Parse(e.Value.ToString()) > 0)
            {
                if (int.Parse(e.Value.ToString()) % 2 != 0)
                {
                    SobelValue = int.Parse(e.Value.ToString());
                    HistogramRefresh(HistogramSobelPath, "Sobel", SobelValue + newName);
                    Sobel();
                }
            }
        }

    }

    public void CannyEdge()
    {
        ObjectNumber = int.Parse(pythonService.CannyEdge(ImgChangePath, Image).Replace("\r\n", String.Empty));
        hasCannyEdge = true;
    }
    public void ToGrayScale()
    {
        ImgChangePath = pythonService.GetGray(ImgChangePath, Image);
        hasGray = true;
    }
    public void Equalize()
    {
        HistogramEqualizedPath = pythonService.Equalize(ImgChangePath, Image);
        hasEqualized = true;
    }
    public void Histogram(string path, string type)
    {
        pythonService.GenerateHistogram(path, type + "/Histogram/" + Image);
    }

    public void HistogramRefresh(string path, string type, string refresh = "")
    {
        pythonService.GenerateHistogram(path, type + "/Histogram/" + refresh);
    }

    public void Mediam()
    {
        HistogramMediamPath = pythonService.Mediam(ImgChangePath, MediamValue + Image, MediamValue);
    }
    public void Mediana()
    {
        HistogramMedianaPath = pythonService.Mediana(ImgChangePath, MedianaValue + Image, MedianaValue);

    }
    public void Gaussian()
    {
        HistogramGaussianPath = pythonService.Gaussian(ImgChangePath, GaussianValue + Image, GaussianValue);

    }
    public void AdaptativeSegmentation()
    {
        HistogramAdaptativeSegmentationPath = pythonService.AdaptativeSegmentation(ImgChangePath, AdaptativeValue + Image, AdaptativeValue);

    }
    public void Otsu()
    {
        HistogramOtsuPath = pythonService.Otsu(ImgChangePath, OtsuValue + Image, OtsuValue);


    }
    public void Sobel()
    {
        HistogramSobelPath = pythonService.Sobel(ImgChangePath, SobelValue + Image, SobelValue);


    }
    public void ManualSegmentation()
    {
        HistogramManualSegmentationPath = pythonService.ManualSegmentation(ImgChangePath, ManualValue.ToString() + Threshould1Value.ToString() + Threshould2Value.ToString() + Image, ManualValue, Threshould1Value, Threshould2Value);

    }
    public void Canny()
    {
        HistogramCannyPath = pythonService.Canny(ImgChangePath, Image, 15, 100, 200);

    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        Resetvariables();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
                var trustedFileNameForFileStorage = file.Name;
                Image = file.Name;
                var path = Path.Combine(Environment.ContentRootPath,
                        "wwwroot", "Imgs", "Input",
                        trustedFileNameForFileStorage);
                ImgChangePath = path;
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            }
            catch (Exception ex)
            {

            }
        }

        isLoading = false;
    }
}